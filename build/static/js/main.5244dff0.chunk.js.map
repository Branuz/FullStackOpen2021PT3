{"version":3,"sources":["components/serverConnector.js","App.js","index.js"],"names":["baseUrl","newObject","axios","post","then","response","data","id","put","delete","FormSetup","props","onSubmit","addName","onChange","x","setNewName","target","value","setNewPhone","type","onClick","document","getElementById","reset","avain","Filter","setSearch","setStatus","Persons","searchStatus","persons","filter","name","includes","newSearch","map","number","window","confirm","console","log","serverConnector","returnedNote","setPersons","n","setSuccessMessage","setTimeout","Notification","message","className","ErrorNotification","App","useState","newName","newPhone","successMessage","errorMessage","setErrorMessage","useEffect","get","event","preventDefault","userObject","length","user","find","changedNote","note","catch","error","a","undefined","concat","ReactDOM","render"],"mappings":"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","file":"static/js/main.5244dff0.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst baseUrl = \"http://localhost:3001/api/persons/\"\r\n\r\nconst getAll = () =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject =>{\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(baseUrl + id, newObject)\r\n    return request.then(response =>response.data)\r\n}\r\nconst deleteUser = (id) =>{\r\n    const request = axios.delete(baseUrl+id)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteUser }\r\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport serverConnector from \"./components/serverConnector\"\nimport './index.css'\n\n\n\nconst FormSetup = (props) =>{\n  return(\n  <form key={props.avain} id=\"myForm\" onSubmit={props.addName}>\n  <div>name: <input onChange={(x) => props.setNewName(x.target.value) }/></div>\n  <div>phone: <input onChange={(x) =>props.setNewPhone(x.target.value) }/></div>\n  <div>\n    <button type=\"submit\" onClick={()=>document.getElementById(\"myForm\").reset()}>add</button>\n  </div>\n</form>\n  )\n}\n\nconst Filter = (props) =>{\n  return(\n    <div>filter show with<input onChange={(x) =>{\n      props.setSearch(x.target.value)\n      props.setStatus(false>0)\n      }}/></div>\n  )\n}\n\nconst Persons = (props) =>{\n  const notesToShow = props.searchStatus\n  ? props.persons\n  : props.persons.filter(x => x.name.includes(props.newSearch))\n\n  return(\n    notesToShow.map(x =><p key={x.id}> {x.name} {x.number} <button onClick={() =>{\n      if(window.confirm(\"Delete \"+x.name)){\n        console.log(x.name + \" deleted\")\n\n        serverConnector.deleteUser(x.id)\n        .then(returnedNote => {\n          props.setPersons(props.persons.filter(n => n.id !== x.id))\n         })\n\n         props.setSuccessMessage(\"Deleted \" +x.name)\n         setTimeout(()=>{\n           props.setSuccessMessage(null)\n         },5000)\n         \n      }\n    }}>delete</button></p>)\n  )\n}\n\nconst Notification = ({ message }) => {\n  \n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\nconst ErrorNotification = ({ message }) => {\n  \n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ newSearch, setSearch ] = useState('')\n  const [ searchStatus, setStatus ] = useState(true)\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n\n\n\n  useEffect(() => {\n    axios\n      .get('http://localhost:3001/api/persons/')\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addName = (event) =>{\n    event.preventDefault()\n    const userObject = {\n      name: newName,\n      number: newPhone,\n      id: persons.length+1\n    }\n    \n    const user = persons.filter(x => x.name===newName)\n\n    if(user.length===1){\n      const data = persons.find(n => n.id === user[0].id)\n      const changedNote = { ...data, number: newPhone, }\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n      \n\n     const t= serverConnector\n        .update(user[0].id, changedNote)\n        .then(response => {\n          setPersons(persons.map(note => (note.id !== user[0].id ? note : response)))\n        }).catch(error =>{\n          \n          setErrorMessage(user[0].name +\" was already removed from server\")\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          return error\n        })\n        \n        const checkSuccess = () => {\n          t.then((a) => {\n            if([a][0]===undefined){\n              setSuccessMessage(\"Number changed for \" +user[0].name)\n              setTimeout(()=>{\n                setSuccessMessage(null)\n              },5000)\n            }\n          })\n        }\n\n    checkSuccess()\n}\n    }\n    else{\n    serverConnector.create(userObject)\n    .then(returnedNote => {\n      setPersons(persons.concat(returnedNote))\n      setNewName(\"\")\n    })\n    setSuccessMessage(<div>Added {userObject.name}</div>)\n    setTimeout(()=>{\n      setSuccessMessage(null)\n    },5000)\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification message={successMessage} />\n        <ErrorNotification message={errorMessage} />\n        <Filter setSearch={setSearch} setStatus={setStatus}/>\n      <h2>add a new</h2>\n        <FormSetup  setNewName={setNewName} setNewPhone={setNewPhone} addName={addName} avain={persons.length+1}  />\n      <h2>Numbers</h2>\n       <Persons searchStatus={searchStatus} persons={persons} newSearch={newSearch} setPersons={setPersons} setNewName={setNewName} setSuccessMessage={setSuccessMessage}/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}